#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

"""
Queries git for untracked files and adds them to the ignored files list.

:license: GPL2+
"""

import argparse
import os.path
import subprocess
import sys

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    ignorefilename = ".gitignore"

    ignores = []
    ignores_new = []

    # Read the current ignore file into the list.
    if os.path.isfile(ignorefilename):
        with open(ignorefilename) as f:
            for line in f:
                ignores.append(line)

    # Query git for the untracked files. Use the ``--porcelain`` option since
    # this is guaranteed to be stable.
    try:
        output = subprocess.check_output(["git", "status", "--porcelain"])

        for line in output.split(b"\n"):
            if not line.startswith(b"??"):
                continue

            # FIXME This assumes that the encoding is utf-8. git is encoding
            # agnostic and so should be this script.
            filename = line[3:].decode("utf-8")

            if filename == ignorefilename:
                continue


            if not filename in ignores:
                ignores_new.append(filename)
    except subprocess.CalledProcessError as e:
        print(e)
        raise e

    if len(ignores_new) == 0:
        sys.exit(0)

    if options.dry_run:
        print("Would append the following entries:")
        print("\n".join(ignores_new))
    else:
        with open(ignorefilename, "w") as f:
            for ignore in ignores + ignores_new:
                f.write(ignore)
                f.write("\n")

        if options.commit:
            try:
                subprocess.check_call(["git", "add", ignorefilename])
                subprocess.check_call(["git", "commit", ignorefilename, "-m",
                                       options.message])
            except subprocess.CalledProcessError as e:
                print(e)
                raise e


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description=__doc__)
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    parser.add_argument("-n", "--dry-run", dest="dry_run", action="store_true", help="Perform a dry run only.")
    parser.add_argument("-c", "--commit", dest="commit", action="store_true", help="Commits the .gitignore automatically.")
    parser.add_argument("-m", "--message", dest="message", type=str, default="Ignore all other files", help="Commit message (default: “%(default)s”).")
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
